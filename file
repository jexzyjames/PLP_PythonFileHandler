import os

def read_and_modify_file(input_filename, output_filename):
    """
    Reads content from input_filename, converts it to uppercase,
    and writes the modified content to output_filename.

    Args:
        input_filename (str): The path to the input file.
        output_filename (str): The path to the output file where modified content will be saved.
    """
    try:
        # Step 1: Read content from the input file
        with open(input_filename, 'r', encoding='utf-8') as infile:
            original_content = infile.read()
        print(f"Successfully read content from '{input_filename}'.")

        # Step 2: Modify the content (e.g., convert to uppercase)
        modified_content = original_content.upper()
        print("Content modified (converted to uppercase).")

        # Step 3: Write the modified content to a new output file
        with open(output_filename, 'w', encoding='utf-8') as outfile:
            outfile.write(modified_content)
        print(f"Successfully wrote modified content to '{output_filename}'.")

    except FileNotFoundError:
        print(f"Error: The file '{input_filename}' was not found. Please ensure it exists.")
    except IOError as e:
        print(f"Error: An I/O error occurred during file operation: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

# --- Main execution ---
if __name__ == "__main__":
    input_file = "input.txt"
    output_file = "output_uppercase.txt"

    # Create a dummy input file if it doesn't exist for easy testing
    if not os.path.exists(input_file):
        with open(input_file, 'w', encoding='utf-8') as f:
            f.write("This is line one.\n")
            f.write("This is line two, with some numbers: 123.\n")
            f.write("And a final line.\n")
        print(f"Created a sample '{input_file}' for demonstration.")

    print(f"Attempting to read '{input_file}' and write to '{output_file}'...")
    read_and_modify_file(input_file, output_file)
    print("\n--- Program Finished ---")

    # Optional: Print content of the output file to verify
    # try:
    #     with open(output_file, 'r', encoding='utf-8') as f:
    #         print(f"\nContent of '{output_file}':")
    #         print(f.read())
    # except FileNotFoundError:
    #     print(f"Output file '{output_file}' not found (should not happen if successful).")
